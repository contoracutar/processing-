float X, Y, R;
float x, y, r;
float cx, cy, cr;

float xX, yY, S, Rr;


// 三角形の色
int tri_up, tri_down, tri_left, tri_right;

// 流れてくる三角形のポジション
// 上
float up_ax, up_bx, up_cx;
float up_ay, up_by, up_cy;
// 左
float left_ax, left_bx, left_cx;
float left_ay, left_by, left_cy;
// 下
float down_ax, down_bx, down_cx;
float down_ay, down_by, down_cy;
// 右
float right_ax, right_bx, right_cx;
float right_ay, right_by, right_cy;

//================
// 初期化
//================
void setup()
{
  size(350, 550);
  background(0);
  X = x = width / 2;
  Y = y = height / 2+100;
  R = 200;
  r = 100;
  cr = r / 2;
  
  tri_up = tri_down = tri_left = tri_right = 0;
  
  up_ax = 0  - 30;
  up_bx = 0  - 10;
  up_cx = 0  - 50;
  up_ay = height /2 - 250;
  up_by = height / 2 - 210;
  up_cy = height / 2 - 210;
  
  left_ax = -6;
  left_bx = -10;
  left_cx = -6;
  left_ay = height / 2 - 200;
  left_by = height / 2 - 180;
  left_cy = height / 2 - 160;
  
  down_ax = -10;
  down_bx = -6;
  down_cx = -8;
  down_ay = height / 2 - 150;
  down_by = height / 2 - 150;
  down_cy = height / 2 - 110;
  
  right_ax = -10;
  right_bx = -6;
  right_cx = -10;
  right_ay = height / 2 - 100;
  right_by = height / 2 - 80;
  right_cy = height / 2 - 60;
}

//================
// 処理&描画
//================
void draw()
{
 background(0);

  fill(0);
  ellipse(X, Y, R, R);
  fill(255);
  stroke(100);

  // 三角形のシンボル
  fill(tri_up);
  triangle(width / 2 + 110, up_ay, 
               width / 2 + 90, up_by,
               width / 2 + 130, up_cy);
  fill(tri_left);
  triangle(width / 2 + 130, left_ay, 
               width / 2 + 90, left_by,
               width / 2 + 130, left_cy);
  fill(tri_down);
  triangle(width / 2 + 90, down_ay, 
               width / 2 + 130, down_by,
               width / 2 + 110, down_cy);
  fill(tri_right);
  triangle(width / 2 + 90, right_ay, 
               width / 2 + 130, right_by,
               width / 2 + 90, right_cy);
  fill(255);
  stroke(100);

  S = sqrt(xX * xX + yY * yY);
  Rr = (R/2 - r/2) / S;
  
  if(R/2 < S + r/2)
  {
   x = X + xX * Rr;
   y = Y + yY * Rr;
  }
  
 fill(0, 0, 0, 0);
  ellipse(x, y, r, r);
  fill(255);
  stroke(100);
  if(mousePressed == false)
  {
    x += 0.1 * (X - x);
    y += 0.1 * (Y - y);
  }

  Symbol();
}

//---------------------------------------------
// 流れてくる三角形の処理
//---------------------------------------------
void Symbol()
{
  up_ax+=2;
  up_bx+=2;
  up_cx+=2;
  

  fill(tri_up);
  triangle(up_ax, up_ay, 
               up_bx, up_by,
               up_cx, up_cy);
  fill(tri_left);
  triangle(left_ax, left_ay, 
               left_bx, left_by,
               left_cx, left_cy);
  fill(tri_down);
  triangle(down_ax, down_ay, 
               down_bx, down_by,
               down_cx, down_cy);
  fill(tri_right);
  triangle(right_ax, right_ay, 
               right_bx, right_by,
               right_cx, right_cy);
  fill(255);
  stroke(100);
}

//================
// 以下マウス系の処理
//================
void mousePressed() 
{
  cx = x - mouseX;
  cy = y - mouseY;
}

void mouseDragged()
{
  if(cx * cx + cy * cy <= cr * cr) 
  {
    x = mouseX + cx;
    y = mouseY + cy;
  }
  xX = x - X;
  yY = y - Y;
  
  if(y < height / 2 + 50)
  {
  tri_up = 255;
  }
  if(x < width / 2 - 50)
  {
  tri_left = 255;
  }
  if(y > height / 2 + 150)
  {
  tri_down = 255;
  }
  if(x > width / 2 + 50)
  {
  tri_right = 255;
  }

  if(y >= height / 2 + 50)
  {
  tri_up = 0;
  }
  if(x >= width / 2 - 50)
  {
  tri_left = 0;
  }
  if(y <= height / 2 + 150)
  {
  tri_down = 0;
  }
  if(x <= width / 2 + 50)
  {
  tri_right = 0;
  }

}

void mouseReleased()
{
  tri_up = tri_down = tri_left = tri_right = 0;
}
