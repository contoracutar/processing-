ArrayList<CBall> BallList;
CPlayer player;
CSelectColor selectcolor;
CBlock block;
COLOR Color;
COLORTYPE ColorType;

boolean IsCollision_Rectangle(float posX, float posY, float size, float col_posX, float col_posY, float col_size)
{
  float x0 = posX;
  float y0 = posY;
  float x1 = posX + size;
  float y1 = posY + size;

  float x2 = col_posX;
  float y2 = col_posY;
  float x3 = col_posX + col_size;
  float y3 = col_posY + col_size;

  if (x0 < x3 && x2 < x1 && y0 < y3 && y2 < y1)
  {
    return true;
  }
  else
  {
    return false;
  }
}

int time = 0;
int ballcount = 0;
int oldballcount = ballcount;
float PlayerMovePosX;
final color red = color(255, 0, 0, 255);
final color green = color(0, 255, 0, 255);
final color blue = color(0, 0, 255, 255);
final color yellow = color(255, 255, 0, 255);
final color lightblue = color(0, 255, 255, 255);
final color purple = color(255, 0, 255, 255);
final color A_red = color(255, 0, 0, 5);
final color A_green = color(0, 255, 0, 5);
final color A_blue = color(0, 0, 255, 5);
final color A_yellow = color(255, 255, 0, 5);
final color A_lightblue = color(0, 255, 255, 5);
final color A_purple = color(255, 0, 255, 5);
color rainbow;
color A_rainbow;
color colorbox;

//    Main     //
void setup()
{
  size(800, 1000);
  smooth();
  BallList = new ArrayList<CBall>();
  player = new CPlayer(width / 2, 400.0f, 10.0f);
  selectcolor = new CSelectColor();
  block = new CBlock(50.0f, 50.0f, 10.0f);
  ColorType = COLORTYPE.Type_Red;
}

void draw()
{
  noStroke();
  fill(0, 0, 0, 10);
  rect(0, 0, width, height);
  rainbow = color(random(255), random(255), random(255), 255);
  A_rainbow = color(random(255), random(255), random(255), 5);

  if(oldballcount != ballcount)
  {
    BallList.add(new CBall(width / 2, 0, 5.0f, random(-6.0f, 6.0f), random(-6.0f, 6.0f), (int)random(0, 7)));
    oldballcount = ballcount;
  }
  
  if(time == 0)
  {
    ballcount++;
  }
  
  for(int i = 0; i < BallList.size(); i++)
  {
    CBall ball = (CBall) BallList.get(i);
    ball.Update(block);
    ball.Draw();
    
    //  player&ball_Collision
    if (player.GetPosX() < ball.GetPosX() && ball.GetPosX() < player.GetPosX() + player.GetScaleX()
    && player.GetPosY() - 5 < ball.GetPosY() && ball.GetPosY() < player.GetPosY() + 5)
    {
      if(ball.GetColorNum() == 0 && ColorType == COLORTYPE.Type_Red)
      {
        ball.SetVelocityY(ball.GetVelocityY() * -1);
      }
      else if(ball.GetColorNum() == 1 && ColorType == COLORTYPE.Type_Green)
      {
        ball.SetVelocityY(ball.GetVelocityY() * -1);
      }
      else if(ball.GetColorNum() == 2 && ColorType == COLORTYPE.Type_Blue)
      {
        ball.SetVelocityY(ball.GetVelocityY() * -1);
      }
      else if(ball.GetColorNum() == 3 && ColorType == COLORTYPE.Type_Yellow)
      {
        ball.SetVelocityY(ball.GetVelocityY() * -1);
      }
      else if(ball.GetColorNum() == 4 && ColorType == COLORTYPE.Type_LightBlue)
      {
        ball.SetVelocityY(ball.GetVelocityY() * -1);
      }
      else if(ball.GetColorNum() == 5 && ColorType == COLORTYPE.Type_Purple)
      {
        ball.SetVelocityY(ball.GetVelocityY() * -1);
      }
      else if(ball.GetColorNum() == 6 && ColorType == COLORTYPE.Type_Rainbow)
      {
        ball.SetVelocityY(ball.GetVelocityY() * -1);
      }
  }
    if (ball.GetisDelete())
    {
      BallList.remove(i);
    }
  }
  player.Update();
  player.Draw();
  selectcolor.Update();
  selectcolor.Draw();
  block.Draw();
  time++;
}

void mousePressed()
{
  PlayerMovePosX = player.GetPosX() - mouseX;
}

void mouseDragged()
{
  player.SetPosX(PlayerMovePosX + mouseX); 
}
  
  
//  PlayerClass  //
class CPlayer
{
  public void SetPosX(float x){ posX = x; }
  public float GetPosX(){ return posX; }
  public float GetPosY(){ return posY; }
  public float GetScaleX(){ return scaleX; }
  private float posX, posY = 900.0f;
  private float scaleX, scaleY;
  
  //  PlayerConstructor
  CPlayer (float posX, float scaleX, float scaleY)
  {
    this.posX = posX;
    this.scaleX = scaleX;
    this.scaleY = scaleY;
  }
  //  PlayerUpdate
  public void Update()
  {
    Color=COLOR.Blue;
    if(ColorType == COLORTYPE.Type_Red){ colorbox = red; }
    else if(ColorType == COLORTYPE.Type_Green){ colorbox = green; }
    else if(ColorType == COLORTYPE.Type_Blue){ colorbox = blue; }
    else if(ColorType == COLORTYPE.Type_Yellow){ colorbox = yellow; }
    else if(ColorType == COLORTYPE.Type_LightBlue){ colorbox = lightblue; }
    else if(ColorType == COLORTYPE.Type_Purple){ colorbox = purple; }
    else if(ColorType == COLORTYPE.Type_Rainbow){ colorbox = rainbow; }

    if (posX < 0)
    {
      posX = 0;
    }
    else if (posX > width - 400)
    {
      posX = width - 400;
    }
  }
  //  PlayerDraw
  public void Draw()
  {
    fill(colorbox);
    rect(posX, posY, scaleX, scaleY);
  }
}


//  BallClass  //
class CBall
{
  public void SetVelocityY(float velocityY){ this.velocityY = velocityY; }
  public int GetColorNum(){ return colornum; }
  public float GetPosX(){ return posX; }
  public float GetPosY(){ return posY; }
  public float GetVelocityY(){ return velocityY; }
  public boolean GetisDelete(){ return isDelete; }
  private int colornum;
  private float posX, posY;
  private float oldposX, oldposY;
  private float scale;
  private float velocityX, velocityY;
  private boolean isDelete;
  private color ballcolorbox;
  
  //  BallConstructor
  CBall (float posX, float posY, float scale, float velocityX, float velocityY, int colornum)
  {
    this.posX = posX;
    this.posY = posY;
    this.scale = scale;
    this.velocityX = velocityX;
    this.velocityY = velocityY;
    this.colornum = colornum;
  }
  //  BallUpdate
  public void Update(CBlock block)
  {
    if(colornum == 0){ Color = COLOR.Red; }
    else if(colornum == 1){ Color = COLOR.Green; }
    else if(colornum == 2){ Color = COLOR.Blue; }
    else if(colornum == 3){ Color = COLOR.Yellow; }
    else if(colornum == 4){ Color = COLOR.LightBlue; }
    else if(colornum == 5){ Color = COLOR.Purple; }
    else if(colornum == 6){ Color = COLOR.Rainbow; }
      
    if(Color == COLOR.Red){ ballcolorbox = red; }
    else if(Color == COLOR.Green){ ballcolorbox = green; }
    else if(Color == COLOR.Blue){ ballcolorbox = blue; }
    else if(Color == COLOR.Yellow){ ballcolorbox = yellow; }
    else if(Color == COLOR.LightBlue){ ballcolorbox = lightblue; }
    else if(Color == COLOR.Purple){ ballcolorbox = purple; }
    else if(Color == COLOR.Rainbow){ ballcolorbox = rainbow; }
    
    posX += velocityX;
    posY += velocityY;
    
    for(int x = 0; x < block.BlockHeight; x++)
    {
      for(int y = 0; y < block.BlockWidth; y++)
      {
//        rect(x * scale, y * scale, scale, scale);
        if(IsCollision_Rectangle(posX, posY, scale, (x+1) * block.GetPosX(), (y+1) * block.GetPosY(), block.GetScale()) && block.BlockData[x][y] != 0)
        {
          block.Breake(x, y);
          velocityX *= -1;
          velocityY *= -1;
          ballcount++;
          /*
          if(posY-scale <= block.GetPosY+(x+1)*block.BlockHeight && posY-scale >= block.posY+x*block.BlockHeight 
          && posX <= block.posX+(y+1)*block.BlockWidth && posX >= block.GetPosX+y*block.BlockWidth)
          {
          block.Breake(x, y);
          speed *= -1;
          }
          else if(direction%TWO_PI<PI && y+size <= m.y+(i+1)*m.block_height && y+size >= m.y+i*m.block_height
          && x <= m.x+(j+1)*m.block_width && x >= m.x+j*m.block_width)
          {
          block.Breake(x, y);
          speed *= -1;
          }*/
        }
/*
          if(block.BlockData[x][y] == 0)continue;
          else if(posY - scale <= block.GetPosY() + x * scale && posY - scale >= x * block.BlockHeight + block.GetPosY() 
          && posX <= block.GetPosX() + (y + 1) * block.BlockWidth && posX >= y * block.BlockWidth + block.GetPosX())
          {
            velocityY *= -1;
            block.Breake(x, y);
          }
          else if(posY + scale <= block.GetPosY() + (x + 1) * block.BlockHeight && posY + scale >= x * block.BlockHeight + block.GetPosY()
          && posX <= block.GetPosX() + (y + 1) * block.BlockWidth && posX >= y * block.BlockWidth + block.GetPosX())
          {
            velocityX *= -1;
            block.Breake(x, y);
          }
*/
      }
    }
    if (posX < 0 || posX > width)
    {
      velocityX *= -1;
    }
    else if (posY < 0)
    {
      velocityY *= -1;
    }
    if (posY > height)
    {
      isDelete = true;
    }
  }
  //  BallDraw
  public void Draw()
  {
    fill(ballcolorbox);
    ellipse(posX, posY, scale, scale);
  }
}

  
//  SelectColorClass  //
class CSelectColor
{
  private float posY = 930.0f;
  private float scale = 50;
  private color colorbox;
  
  //  SelectColorConstructor
  CSelectColor (){}
  //  SelectColorUpdate
  public void Update()
  {
    if(IsCollision_Rectangle(50, posY, scale, mouseX, mouseY, 1)){ ColorType = COLORTYPE.Type_Red; }
    if(IsCollision_Rectangle(150, posY, scale, mouseX, mouseY, 1)){ ColorType = COLORTYPE.Type_Green; }
    if(IsCollision_Rectangle(250, posY, scale, mouseX, mouseY, 1)){ ColorType = COLORTYPE.Type_Blue; }
    if(IsCollision_Rectangle(350, posY, scale, mouseX, mouseY, 1)){ ColorType = COLORTYPE.Type_Yellow; }
    if(IsCollision_Rectangle(450, posY, scale, mouseX, mouseY, 1)){ ColorType = COLORTYPE.Type_LightBlue; }
    if(IsCollision_Rectangle(550, posY, scale, mouseX, mouseY, 1)){ ColorType = COLORTYPE.Type_Purple; }
    if(IsCollision_Rectangle(650, posY, scale, mouseX, mouseY, 1)){ ColorType = COLORTYPE.Type_Rainbow; }
  }
  //  SelectColorDraw
  public void Draw()
  {
    if(ColorType == COLORTYPE.Type_Red){ fill(red); }
    else if(ColorType != COLORTYPE.Type_Red){ fill(A_red); }
    rect(50, posY, scale, scale);

    if(ColorType == COLORTYPE.Type_Green){ fill(green); }
    else if(ColorType != COLORTYPE.Type_Green){ fill(A_green); }
    rect(150, posY, scale, scale);
    
    if(ColorType == COLORTYPE.Type_Blue){ fill(blue); }
    else if(ColorType != COLORTYPE.Type_Blue){ fill(A_blue); }
    rect(250, posY, scale, scale);

    if(ColorType == COLORTYPE.Type_Yellow){ fill(yellow); }
    else if(ColorType != COLORTYPE.Type_Yellow){ fill(A_yellow); }
    rect(350, posY, scale, scale);

    if(ColorType == COLORTYPE.Type_LightBlue){ fill(lightblue); }
    else if(ColorType != COLORTYPE.Type_LightBlue){ fill(A_lightblue); }
    rect(450, posY, scale, scale);

    if(ColorType == COLORTYPE.Type_Purple){ fill(purple); }
    else if(ColorType != COLORTYPE.Type_Purple){ fill(A_purple); }
    rect(550, posY, scale, scale);

    if(ColorType == COLORTYPE.Type_Rainbow){ fill(rainbow); }
    else if(ColorType != COLORTYPE.Type_Rainbow){ fill(A_rainbow); }
    rect(650, posY, scale, scale);
  }
}


//  BlockClass  //
class CBlock
{
  public int[][] BlockData =
  {
  // 1 2 3 4 5 6 7 8 9 10                  20                  30                  40                  50                  60                  70
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //1
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0},  //5
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0},  //10
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0},  //15
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0},  //20
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,2,2,2,2,0,0,0,0,0,2,2,2,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2,2,2,2,2,2,0,0,0,2,2,2,0,0,0,0,0,0,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,2,2,2,2,0,2,2,2,2,2,2,2,2,0,0,2,2,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0},  //25
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,2,2,2,0,2,2,2,0,0,0,2,2,2,2,2,0,0,2,2,0,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,2,2,2,2,0,0,2,2,2,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,2,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,2,0,0,0,0,0,2,2,2,0,0,2,2,2,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,2,2,0,0,0,2,2,2,0,2,2,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},  //30
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,2,2,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,2,2,2,2,2,2,2,2,0,0,0,0,0},  //35
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,2,2,2,2,2,2,2,2,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0},  //40
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0},  //45
    {2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //50
    {2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0},
    {0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0},
    {0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0},  //55
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //60
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //65
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //70
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    
    //{'#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
  };
  public float GetPosX(){ return posX; }
  public float GetPosY(){ return posY; }
  public float GetScale(){ return scale; }
  public int BlockWidth = BlockData[0].length;
  public int BlockHeight = BlockData.length;
  private float posX, posY;
  private float scale;
  
  //  BlockConstructor
  CBlock(float posX, float posY, float scale)
  {
    this.posX = posX;
    this.posY = posY;
    this.scale = scale;
  }
  //  BlockDraw
  public void Draw()
  {
    translate(posX, posY);
    stroke(0);
    for(int x = 0; x < BlockWidth; x++)
    {
      for(int y = 0; y < BlockHeight; y++)
      {
        switch(BlockData[y][x])
        {
          case 0 : continue;
          case 1 : fill(0, 0, 255);break;
          case 2 : fill(255, 0, 0);break;
          case 3 : fill(0, 0, 255);break;
          //case '#':fill(0,0,255);break;
        }
        rect(x * scale, y * scale, scale, scale);
      }
    }
  } 
  public void Breake(int dateX,int dateY)
  {
    if(BlockData[dateX][dateY] > 0)
    {
      BlockData[dateX][dateY] = 0;
    }
  }
}
